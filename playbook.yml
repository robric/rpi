## Install expect on localhost (not there by default on K8s)
- hosts: local 
  gather_facts: no
  tasks:
    - name: install pexpect
      pip:
        name: pexpect
      become: yes
- hosts: k8s_hosts
  become: true
  gather_facts: no
  vars:
    ssh_command_pass_old: ubuntu
    ssh_command_pass: ubuntu123!
  remote_user: root
  tasks:
    - debug:
        msg: "{{ ansible_ssh_common_args }} old pw:{{ ssh_command_pass_old }} new pw:{{ ssh_command_pass }}"
    - name: Set password if expired (happens after fresh reinstall)
      delegate_to: 127.0.0.1
      ignore_errors: yes 
      expect:
        command: "ssh {{ ansible_ssh_common_args }} {{ ansible_user }}@{{ inventory_hostname }}"
        timeout: 10
        responses:
          "password:": "{{ ssh_command_pass_old }}"
          "Current password:": "{{ ssh_command_pass_old }}"
          "New password:": "{{ ssh_command_pass }}"
          "Retype new password:": "{{ ssh_command_pass }}"
#          # if succesfully login then quit
          "\\~\\]\\$": exit
      register: status
      changed_when: "'password updated successfully' in status.stdout"
    - name: Get boot command file for to see if modification is required
      slurp: 
        src: "/boot/firmware/cmdline.txt"
      register: boot_command_file
    - debug:
        msg: "{{ boot_command_file['content'] | b64decode }}"
    - name: Modify boot command with cgroup settings
      replace:
        path: /boot/firmware/cmdline.txt
        regexp: '^(net(.*)$)'
        replace: '\1 cgroup_memory=1 cgroup_enable=memory'
      when: "'cgroup' not in (boot_command_file['content'] | b64decode)"
      become: true

    - name: "Change hostnames to master-#id or worker-#id (id defined in inventory)"
      become: true
      hostname:
        name: "{{ (item | regex_replace('(^.*)s$', '\\1')) }}-{{id}}"
      when: item in ["workers","masters"]
      with_items: "{{group_names}}"
    - name: Attempting reboot
      shell: reboot
      async: 1200
      poll: 0
    - name: Waiting for resurection
      wait_for_connection:
        delay: 60
        timeout: 300
    - name: load br_netfilter module
      modprobe:
        name: br_netfilter
        state: present
    - name: set sysctl for iptables
      sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: 1
        sysctl_set: yes
        state: present
        sysctl_file: /etc/sysctl.d/k8s.conf
        reload: yes
    - name: set sysctl for ip6tables
      sysctl:
        name: net.bridge.bridge-nf-call-ip6tables
        value: 1
        sysctl_set: yes
        state: present
        sysctl_file: /etc/sysctl.d/k8s.conf
        reload: yes
    - name: Docker installation
      apt:
        name: docker.io
        state: present
    - name: Create docker daemon file settings (systemd cgroup)
      copy:
        dest: "/etc/docker/daemon.json"
        content: |
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "100m"
          },
          "storage-driver": "overlay2"
          }
    - name: restart docker service
      systemd:
        name: docker
        daemon_reload: yes
        state: restarted

    - name: Add apt key from google
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present            
    - name: Add k8S (xenial still the latest) repository into apt sources
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes
    - name: Run the equivalent of "apt-get update" as a separate step
      apt:
        update_cache: yes
- hosts: masters
  become: true
  gather_facts: no
  tasks:
    - name: Install kubeadm kubelet and kubectl
      apt:
        name: 
          - kubelet
          - kubeadm
          - kubectl
        update_cache: yes
        state: present
    - name: In case this is a second pass we delete old K8s install
      command: "kubeadm reset --force"
    - name: Initialize the Kubernetes cluster using kubeadm
      command: kubeadm init --pod-network-cidr=10.244.0.0/16
      register: status
    - debug: 
        var: status

    - name: Create .kube in ubuntu home
      become: no
      file:
        path: /home/ubuntu/.kube
        state: directory
        mode: 0755

    - name: copy kubernetes admin.conf to root home dir
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        remote_src: yes
        owner: ubuntu
 